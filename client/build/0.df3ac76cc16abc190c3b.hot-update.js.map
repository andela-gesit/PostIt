{"version":3,"sources":["webpack:///./client/components/views/partials/MessageInputBox.jsx?de5f"],"names":["MessageInputBox","props","priority","isComment","setPriority","bind","sendMessage","state","$","keypress","event","which","keyCode","click","target","id","setState","token","localStorage","getItem","decode","senderId","groupId","body","commentBody","value","postBody","trim","store","postMessage","normal","urgent","critical","comment","Component"],"mappings":"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","file":"0.df3ac76cc16abc190c3b.hot-update.js","sourcesContent":["/* eslint-env browser */\nimport React from 'react';\nimport jwtDecode from 'jwt-decode';\n\n/**\n * React component to display the message input div\n */\nexport default class MessageInputBox extends React.Component {\n  /**\n   * @param {Object} props Component properties passed from parent component\n   */\n  constructor(props) {\n    super(props);\n    this.priority = 'normal'; // Default priority\n    this.isComment = 'true';\n    this.setPriority = this.setPriority.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.state = {\n      priority: 'normal'\n    };\n  }\n  /**\n   * Method called after a component is rendered, to attach event listeners to send message button\n   * @return {undefined} This method returns nothing\n   */\n  componentDidMount() {\n    // Set focus to 'send' button\n    $('.message-box').keypress((event) => {\n      if ((event.which && event.which === 13) || (event.keyCode && event.keyCode === 13)) {\n        $('#member-list-button').click();\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  /**\n   * This method sets the priority of the message to be sent\n   * @param {Object} event fired when setting message priority\n   * @return {undefined} This method returns nothing\n   */\n  setPriority(event) {\n    const priority = event.target.id;\n    this.setState({ priority });\n  }\n  /**\n   * This method sends a message to the group\n   * @return {undefined} This method returns nothing\n   */\n  sendMessage() {\n    const token = localStorage.getItem('token');\n    const decode = jwtDecode(token);\n    const senderId = decode.id;\n    const groupId = localStorage.getItem('groupId');\n    let priority = this.state.priority;\n    let body;\n    if (this.state.priority === 'comment') {\n      priority = 'normal'; // A comment has normal priority\n      body = this.commentBody.value;\n      this.isComment = 'true';\n      // Clear input bo\n      this.commentBody.value = '';\n    } else {\n      body = this.postBody.value;\n      this.isComment = 'false';\n      // Clear input box\n      this.postBody.value = '';\n    }\n    // Check for empty message body before sending\n    if (body && body.trim()) {\n      this.props.store.postMessage(senderId, groupId, body, priority, this.isComment, token);\n    }\n  }\n  /**\n   * Render method of React component\n   * @returns {Object} Returns the DOM object to be rendered\n   */\n  render() {\n    return (\n      <div id=\"messageInputBox\">\n        <div id=\"messageInput\">\n          <div className=\"row\">\n            <div className=\"col center s12 m8 offset-m2 l8 offset-l2\">\n              <input name=\"priority\" onClick={this.setPriority}\n                ref={(normal) => { this.normal = normal; }} type=\"radio\"\n                id=\"normal\" defaultChecked />\n              <label htmlFor=\"normal\">Normal</label>\n              <input name=\"priority\" onClick={this.setPriority}\n                ref={(urgent) => { this.urgent = urgent; }} type=\"radio\" id=\"urgent\" />\n              <label htmlFor=\"urgent\">Urgent</label>\n              <input name=\"priority\" onClick={this.setPriority}\n                ref={(critical) => { this.critical = critical; }} type=\"radio\" id=\"critical\" />\n              <label htmlFor=\"critical\">Critical</label>\n              <input name=\"priority\" onClick={this.setPriority}\n                ref={(comment) => { this.comment = comment; }} type=\"radio\" id=\"comment\" />\n              <label htmlFor=\"comment\">Comment</label>\n            </div>\n            <div className=\"col s12 m8 offset-m2 l8 offset-l2\">\n              {/* Adjust the text input window to accept smaller text quantity for comments */}\n              {\n                this.state.priority === 'comment' ?\n                (\n                  <div className=\"message-box\">\n                    <div className=\"text-input-field\">\n                      <input className=\"black-text materialize-textarea\"\n                        ref={(commentBody) => { this.commentBody = commentBody; }}\n                        type=\"text\" name=\"mymessage\" defaultValue={''} />\n                    </div>\n                    <div className=\"send-comment-button\">\n                      <button autoFocus id=\"member-list-button\" onClick={this.sendMessage}\n                        className=\"btn\"><i className=\"material-icons\">send</i></button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"message-box\">\n                    <div className=\"text-input-field\">\n                      <textarea className=\"black-text materialize-textarea\"\n                        ref={(postBody) => { this.postBody = postBody; }} type=\"text\"\n                        name=\"mymessage\" defaultValue={''} />\n                    </div>\n                    <div className=\"send-button\">\n                      <button autoFocus id=\"member-list-button\" onClick={this.sendMessage}\n                      className=\"btn\"><i className=\"material-icons\">send</i></button>\n                    </div>\n                  </div>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./client/components/views/partials/MessageInputBox.jsx"],"sourceRoot":""}