{"version":3,"sources":["webpack:///./client/services/dataservice.js?7c7c"],"names":["dataService","action","next","url","type","post","send","email","password","end","err","res","message","body","userDetails","user","token","firstName","lastName","phone","messages","groupId","set","priority","isComment","senderId","adderId","addedMembers","delete","ownerId","creatorId","title","description","initialMembers","data","get","status","messagesDbSnapshot","membersDBSnapshot","dbSnapShot","offset","limit","postItGroups","userId","idToDelete","deletedId"],"mappings":"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","file":"0.ee83a48609239faf9d7d.hot-update.js","sourcesContent":["import request from 'superagent';\n\nconst dataService = store => next => (action) => {\n  // Pass all actions through by default\n  next(action);\n  const url = 'http://postit-api-victor.herokuapp.com/api';\n  switch (action.type) {\n    // Signin a user\n    case 'SIGN_IN':\n      request.post(`${url}/user/signin`)\n        .send({\n          email: action.email,\n          password: action.password,\n        })\n        .end((err, res) => {\n          // Return the first error message when there are many\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              return next({\n                type: 'SIGN_IN_ERROR',\n                message: res.body.message\n              });\n            }\n          }\n          const userDetails = res.body.user;\n          userDetails.token = res.body.token;\n          next({\n            type: 'SIGN_IN_SUCCESS',\n            userDetails\n          });\n        });\n      break;\n    // Signup a new user\n    case 'SIGN_UP':\n      request.post(`${url}/user/signup`)\n        .send({\n          firstName: action.firstName,\n          lastName: action.lastName,\n          email: action.email,\n          phone: action.phone,\n          password: action.password,\n        })\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              if (res.body.messages) {\n                // Return the first error message when there are many\n                return next({\n                  type: 'SIGN_UP_ERROR',\n                  message: res.body.messages[0]\n                });\n              } else {\n                return next({\n                  type: 'SIGN_UP_ERROR',\n                  message: res.body.message\n                });\n              }\n            }\n          }\n          const userDetails = res.body.user;\n          userDetails.token = res.body.token;\n          next({\n            type: 'SIGN_UP_SUCCESS',\n            userDetails\n          });\n        });\n      break;\n    // Post a message to a group\n    case 'POST_MESSAGE':\n      request.post(`${url}/group/${action.groupId}/message`)\n        .set('x-access-token', action.token)\n        .send({\n          body: action.body,\n          priority: action.priority,\n          isComment: action.isComment,\n          senderId: action.senderId,\n        })\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'POST_MESSAGE_ERROR',\n              message: err.message\n            });\n          }\n          const message = res.body.message;\n          next({\n            type: 'POST_MESSAGE_SUCCESS',\n            message,\n            groupId: action.groupId\n          });\n        });\n      break;\n    // Add group members\n    case 'ADD_MEMBER':\n      request.post(`${url}/group/${action.groupId}/user`)\n        .set('x-access-token', action.token)\n        .send({\n          email: action.email,\n          adderId: action.adderId,\n        })\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'ADD_MEMBER_ERROR',\n              message: err.message\n            });\n          }\n          const addedMembers = res.body;\n          next({\n            type: 'ADD_MEMBER_SUCCESS',\n            addedMembers,\n            groupId: action.groupId\n          });\n        });\n      break;\n    // Delete a group\n    case 'DELETE_A_GROUP':\n      request\n        .delete(`${url}/group/${action.groupId}/delete`)\n        .set('x-access-token', action.token)\n        .send({\n          ownerId: action.ownerId\n        })\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'DELETE_A_GROUP_ERROR',\n              message: err.message\n            });\n          }\n          const groupId = action.groupId;\n          next({\n            type: 'DELETE_A_GROUP_SUCCESS',\n            groupId\n          });\n        });\n      break;\n    // Create a new group\n    case 'CREATE_GROUP':\n      request.post(`${url}/group`)\n        .set('x-access-token', action.token)\n        .send({\n          creatorId: action.creatorId,\n          title: action.title,\n          description: action.description,\n          initialMembers: action.initialMembers\n        })\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              return next({\n                type: 'CREATE_GROUP_ERROR',\n                // Return the first error if there are many\n                message: res.body.messages[0]\n              });\n            }\n          }\n          const data = res.body;\n          next({\n            type: 'CREATE_GROUP_SUCCESS',\n            data\n          });\n        });\n      break;\n    // Load messages from group\n    case 'GET_MESSAGES':\n      request\n        .get(`${url}/group/${action.groupId}/messages`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              // If group no found\n              if (res.status === 404) {\n                return next({\n                  type: 'GET_MESSAGES_ERROR',\n                  message: err.message\n                });\n              }\n              // No authentication\n              if (res.status === 401) {\n                return next({\n                  type: 'INVALID_AUTH',\n                });\n              }\n            }\n            return;\n          }\n          const messagesDbSnapshot = res.body;\n          next({\n            type: 'GET_MESSAGES_SUCCESS',\n            groupId: action.groupId,\n            messagesDbSnapshot,\n          });\n        });\n      break;\n    // Get members of a group\n    case 'GET_GROUP_MEMBERS':\n      request\n        .get(`${url}/group/${action.groupId}/members/`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              return next({\n                type: 'GET_GROUP_MEMBERS_ERROR',\n                message: err.message\n              });\n            }\n          }\n          const membersDBSnapshot = res.body;\n          next({\n            type: 'GET_GROUP_MEMBERS_SUCCESS',\n            membersDBSnapshot,\n            groupId: action.groupId\n          });\n        });\n      break;\n    // Get all users registered on PostIt\n    case 'GET_POST_IT_MEMBERS':\n      request\n        .get(`${url}/members`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors which do not have a res object\n            if (res) {\n              if (res.status === 401) {\n                return next({\n                  type: 'INVALID_AUTH'\n                });\n              } else {\n                return next({\n                  type: 'GET_POST_IT_MEMBERS_ERROR',\n                  message: err.message\n                });\n              }\n            }\n          }\n          const dbSnapShot = res.body;\n          next({\n            type: 'GET_POST_IT_MEMBERS_SUCCESS',\n            dbSnapShot\n          });\n        });\n      break;\n    // Get all groups created on PostIt\n    case 'GET_ALL_GROUPS':\n      request\n        .get(`${url}/groups/${action.offset}/${action.limit}`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'GET_ALL_GROUPS_ERROR',\n              message: err.message\n            });\n          }\n          const postItGroups = res.body;\n          next({\n            type: 'GET_ALL_GROUPS_SUCCESS',\n            postItGroups\n          });\n        });\n      break;\n    // Get all groups a user belongs to (paginated)\n    case 'GET_ALL_GROUPS_FOR_A_USER':\n      request\n        .get(`${url}/user/${action.userId}/groups/${action.offset}/${action.limit}`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            // Ignore browser errors\n            if (res) {\n              return next({\n                type: 'GET_ALL_GROUPS_FOR_A_USER_ERROR',\n                message: err.message\n              });\n            }\n          }\n          const data = res.body;\n          next({\n            type: 'GET_ALL_GROUPS_FOR_A_USER_SUCCESS',\n            data\n          });\n        });\n      break;\n    // Get all groups a user belongs to (non paginated)\n    case 'GET_ALL_GROUPS_FOR_A_USER_AT_ONCE':\n      request\n        .get(`${url}/user/${action.userId}/groups/`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'GET_ALL_GROUPS_FOR_A_USER_AT_ONCE_ERROR',\n              message: err.message\n            });\n          }\n          const data = res.body;\n          next({\n            type: 'GET_ALL_GROUPS_FOR_A_USER_AT_ONCE_SUCCESS',\n            data\n          });\n        });\n      break;\n    // Delete a user from a group\n    case 'DELETE_GROUP_MEMBER':\n      request\n        .delete(`${url}/group/${action.groupId}/members`)\n        .set('x-access-token', action.token)\n        .send({\n          ownerId: action.ownerId,\n          idToDelete: action.idToDelete,\n        })\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'DELETE_GROUP_MEMBER_ERROR',\n              message: err.message\n            });\n          }\n          const deletedId = action.idToDelete;\n          const groupId = action.groupId;\n          next({\n            type: 'DELETE_GROUP_MEMBER_SUCCESS',\n            deletedId,\n            groupId\n          });\n        });\n      break;\n    // Verify token\n    case 'VERIFY_TOKEN':\n      request\n        .get(`${url}/token`)\n        .set('x-access-token', action.token)\n        .end((err, res) => {\n          if (err) {\n            return next({\n              type: 'VERIFY_TOKEN_ERROR',\n            });\n          }\n          next({\n            type: 'VERIFY_TOKEN_SUCCESS',\n          });\n        });\n      break;\n\n    default:\n      break;\n  }\n};\n\nexport default dataService;\n\n\n\n// WEBPACK FOOTER //\n// ./client/services/dataservice.js"],"sourceRoot":""}